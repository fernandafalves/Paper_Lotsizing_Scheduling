# Interactive Strategy I (ISI)
# Fernanda de Freitas Alves
###############################################################################################################

option eexit -100000;
option display_precision 6;
option auxfiles rca;
option solver cplexamp;
option omit_zero_rows 1;
option cplex_options 'return_mipgap 3 timelimit=30 clocktype=1 threads 1 integrality 3e-20';
suffix absmipgap OUT;
suffix relmipgap OUT;
option presolve 0;
option randseed 1000;

param n;
param tf:= 4;
set J ordered:= 1..n;
set T:= 0..tf;
set Conj ordered default {};       
set Cjs ordered default {};        
set CjsII ordered default {};      
set POS ordered default {};        
set S:= 1..10000;
set II:= 1..n;
set Conjunto {S} within II default {};          
set Inv:= 1..10;
set C {Inv} default {};

# Uniform Distribution - Scenario 1

let C[1]:= {1,3,4,5,7,12,13,15,16,17,18,19,21,23,24};
let C[2]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[3]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[4]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[5]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[6]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[7]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[8]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[9]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

param class;
param val;
param Cj {i in 1..10};
param contador;
param cont;
param p{i in J};
param H{i in J};
param B{i in J};
param setup{i in J, j in J};
param Sm{j in J};
param Makespan;
param Tempo{j in J};
param D{i in J, h in T};
param AUXILIAR{j in J, t in 1..tf};
param AUXILIAR2{j in J, t in 1..tf};
param pos{c in 1..contador};
param f default 1;
param makespan;
param NOVO_MAKESPAN{l in S};
param b;
param m;
param u; let u:= 0;
param variacao;
param tempo{g in 0..1000};
param total;
let total:= 0;
let contador:= 0;
let variacao:= 0;
let tempo[0]:= 0;
param tt;
let tt:= 0;
param sumFO;
let sumFO:= 0;
param tempoII{g in 0..1000};
let tempoII[0]:= 0;
param sumBackorder;
let sumBackorder:= 0;

# Parameters for ILS
param ITER;
let ITER:= 0;
param s_0{i in 1..contador};
param aux; param posicao;
param aux2;
param MKS_0;
param MKS_BL{i in 1..contador, j in 1..contador};
param Seq{i in 1..contador};
param AUX{i in 1..contador};
param POSICAO{i in 1..contador};
param CONT; param CONT2;
param SEQ{i in 1..contador, j in 1..contador, k in 1..contador};
param aux3; param aux4; param auxiliar;
param auxiliar2;
param novo_makespan;
let novo_makespan:= 0;

# Parameters for capacity extension
param makespananterior;
let makespananterior:= 0;
param Kanterior;
param KANTERIOR;
param FO;
param cont2;
let cont2:= 0;
param pi;
param gamma;
param alfa:= 0.07;
param K{t in 1..(tf+1)};
let {t in 1..(tf+1)} K[t]:= 112;
param capinicial;
let capinicial:= 112;
param FO1;
param FO2;
param AUX1{j in J, t in T};
param AUX2{j in J, t in T};
param AUX3{j in J, t in T};
param AUX4{j in J, t in T};
let gamma:= 0;
param ITERtotal;
param ITERTOTAL{h in 1..tf};
param Cap{t in 1..(tf+1)};

let Cj[1]:= 4;
let Cj[2]:= 6;
let Cj[3]:= 8;
let Cj[4]:= 10;
let Cj[5]:= 12;
let Cj[6]:= 15;
let Cj[7]:= 20;
let Cj[8]:= 50;
let Cj[9]:= 100;

var I{j in J, t in T}, >=0, integer;
var Ineg{j in J, t in T}, >=0, integer;
var q{j in J, t in 1..tf}, >=0, integer;
var w{j in J, t in 1..tf}, binary;

var E{j in J, t in T}, >=0, integer;
var Eneg{j in J, t in T}, >=0, integer;
var x{j in J, t in 1..tf}, >=0, integer;
var y{j in J, t in 1..tf}, binary;


# Lot-sizing with cuts
#------------------------------------------------------------------------------------------------------------------

minimize A1: sum{j in J, h in T} (H[j]*E[j,h] + B[j]*Eneg[j,h]);

s.t. rest1{j in J, h in tt..tf}: E[j,h] = E[j,h-1] + x[j,h] - D[j,h] + Eneg[j,h] - Eneg[j,h-1];

s.t. rest2{h in tt..tf}: sum{j in 1..n-1}y[j,h]*Sm[j] + sum{j in J}x[j,h]*p[j] <= K[h];

s.t. rest3{h in tt..tf, j in J}: (x[j,h]*p[j])/K[h] <= y[j,h];

s.t. rest4{h in tt..tf, j in J}: y[j,h] <= x[j,h];

s.t. corte{h in tt..tf}: sum{j in 1..n-1}y[j,h]*Sm[j] + sum{j in J}x[j,h]*p[j] <= Cap[h];

s.t. Ifix2{i in J}: E[i,0] = 0;

s.t. Inegfix2{i in J}: Eneg[i,0] = 0;


# Lot-sizing problem
#------------------------------------------------------------------------------------------------------------------

minimize A: sum{j in J, h in T} (H[j]*I[j,h] + B[j]*Ineg[j,h]);

s.t. r1{j in J, h in tt..tf}: I[j,h] = I[j,h-1] + q[j,h] - D[j,h] + Ineg[j,h] - Ineg[j,h-1];

s.t. r2{h in tt..tf}: sum{j in 1..n-1}w[j,h]*Sm[j] + sum{j in J}q[j,h]*p[j] <= K[h];

s.t. r3{h in tt..tf, j in J}: (q[j,h]*p[j])/K[h] <= w[j,h];

s.t. r4{h in tt..tf, j in J}: w[j,h] <= q[j,h];

s.t. Ifix{i in J}: I[i,0] = 0;

s.t. Inegfix{i in J}: Ineg[i,0] = 0;


let val:= 1;
repeat while val <= 9{                                                                                                                                                                                                                                                                                                                          
	let class:=1;

	repeat while class <= 1{
		let n:= Cj[val];

		for{v in C[val]}{
			let variacao:= variacao + 1;

			for{i in 1..n}{
				read H[i] < ("./DataIU/h"& class & n & v &".txt");
				read B[i] < ("./DataIU/B"& class & n & v &".txt");
				read p[i] < ("./DataIU/p"& class & n & v &".txt");

				for{j in 1..n}{
					read setup[i,j] < ("./DataIU/setup"& class & n & v &".txt");
				}

				for{h in 1..tf}{
					read D[i,h] < ("./DataIU/D"& class & n & v &".txt");
				}
			}

			let {j in J}Sm[j]:= min{i in J: i!=j} setup[j,i];
			let {t in 1..(tf+1)} Cap[t]:= K[t];

			repeat{
				let tt:= tt + 1;
				let novo_makespan:= 0;
                let FO2:= 0;
                let gamma:= 0;
                let ITERtotal:= 0;
				let {j in J, t in 1..tf} AUXILIAR[j,t]:= 0;

				repeat{
					let FO1:= FO2;
					let {j in J, t in 1..tf} AUX1[j,t]:= I[j,t];
					let {j in J, t in 1..tf} AUX2[j,t]:= Ineg[j,t];
					let {j in J, t in 1..tf} AUX3[j,t]:= w[j,t];
					let {j in J, t in 1..tf} AUX4[j,t]:= q[j,t];

					objective A;
					drop rest1; drop rest2; drop rest3; drop rest4; drop corte; drop Ifix2; drop Inegfix2;
					restore r1; restore r2; restore r3; restore r4; restore Ifix; restore Inegfix;
					solve;

					let FO:= sum{j in J, t in T} (H[j]*I[j,t] + B[j]*Ineg[j,t]);
					if (gamma == 0) then{
						let total:= 0;
					}
					let cont:= 0;
					let u:= 0;
					let {j in J, t in 1..tf} AUXILIAR2[j,t]:= q[j,t];

					repeat{
						let contador:= 0;
						if (gamma == 0) then{
							let total:= total + 1;
						}

						for{j in J}{
							if(w[j,tt] == 1)then{
								let Conj:= Conj union {j};
								let contador:= contador + 1;
							}
						}

						if (cont == 1) then{
							let {j in J, t in 1..tf} q[j,t]:= AUXILIAR[j,t];
						}

						# Scheduling with the Iterated Local Search
						reset data Cjs, MKS_BL, s_0, Seq, SEQ, AUX, POSICAO, pos;
						commands ILS.txt;

						let NOVO_MAKESPAN[total]:= novo_makespan;
						let Conjunto[total]:= Cjs;
						let cont:= 0;

						# If the sequence is infeasible and the capacity extension has not yet been used
						if (NOVO_MAKESPAN[total] > (K[tt] + 0.05) && gamma == 0) then{
							let ITERtotal:= ITERtotal + 1;

							if (tt == 1) then{
								unfix E; unfix Eneg; unfix x; unfix y;
							}

							let Cap[tt]:= Cap[tt] - 1;

							objective A1;
							drop r1; drop r2; drop r3; drop r4; drop Ifix; drop Inegfix;
							restore rest1; restore rest2; restore rest3; restore rest4; restore corte; restore Ifix2; restore Inegfix2;
							solve;

							let cont:= 1;

							if (solve_result = 'infeasible') then{
								let cont:= 0;
							}

							let u:= 1;
							let {j in J, t in 1..tf} w[j,t]:= y[j,t];

							let {j in J, t in 1..tf} AUXILIAR[j,t]:= x[j,t];
							reset data Conj, q, x, y;
						}
						restore r1; restore r2; restore r3; restore r4; restore Ifix; restore Inegfix;
						if (NOVO_MAKESPAN[total] <= (K[tt] + 0.05)) then{
							let cont:= 0;
						}

						if (cont == 1)then{
							if (tt == 1) then{
								for{j in J}{
									for{t in 1..tt}{
										fix E[j,t]:= E[j,t];
										fix Eneg[j,t]:= Eneg[j,t];
										fix x[j,t]:= AUXILIAR[j,t];
										fix y[j,t]:= w[j,t];
									}
								}
							} else{
								for{j in J}{
									for{t in 1..(tt-1)}{
										fix E[j,t]:= E[j,t];
										fix Eneg[j,t]:= Eneg[j,t];
										fix x[j,t]:= AUXILIAR[j,t];
										fix y[j,t]:= w[j,t];
									}
								}
							}
						}
						reset data Conj;
					}while (cont != 0);

					if (u == 0) then{
							let FO:= sum{j in J, t in T} (H[j]*I[j,t] + B[j]*Ineg[j,t]);
					} else{
							let FO:= sum{j in J, t in T} (H[j]*E[j,t] + B[j]*Eneg[j,t]);
							let {j in J, t in 1..tf} I[j,t]:= E[j,t];
							let {j in J, t in 1..tf} Ineg[j,t]:= Eneg[j,t];
					}
					let FO2:= FO;

					if(((FO2 - FO1) >= 0 && gamma != 0) || ((FO2 - FO1) <= 0 && novo_makespan > K[tt])) then{
						let FO:= FO1;
						let {j in J, t in 1..tf} I[j,t]:= AUX1[j,t];
						let {j in J, t in 1..tf} Ineg[j,t]:= AUX2[j,t];
						let {j in J, t in 1..tf} w[j,t]:= AUX3[j,t];
						let {j in J, t in 1..tf} q[j,t]:= AUX4[j,t];
						let K[tt+1]:= KANTERIOR;
						let K[tt]:= Kanterior;
						let NOVO_MAKESPAN[total]:= makespananterior;
						break;
					}

					if (FO2 < FO1 && gamma != 0) then{
						break;
					}

					let gamma:= 0;
					let cont2:= 0;

					# Capacity Extension
					if (NOVO_MAKESPAN[total] < K[tt] + 0.05) then{
						let gamma:= K[tt] - NOVO_MAKESPAN[total];

						if (gamma > 0.05 && gamma <= (alfa*capinicial)) then{
							if (tt < tf) then{
								let Kanterior:= K[tt];
								let KANTERIOR:= K[tt+1];
								let K[tt+1]:= capinicial + gamma;
								let K[tt]:= Kanterior - gamma;
								let cont2:= 1;
								let makespananterior:= NOVO_MAKESPAN[total];
							} else{
								break;
							}
						} else{
							if (gamma > 0.05 && gamma > (alfa*capinicial)) then{
								if (tt < tf) then{
									let Kanterior:= K[tt];
									let KANTERIOR:= K[tt+1];
									let K[tt+1]:= capinicial + (alfa*capinicial);
									let K[tt]:= Kanterior - alfa*capinicial;
									let cont2:= 1;
									let makespananterior:= NOVO_MAKESPAN[total];
								} else{
									break;
								}
							} else{
								break;
							}
						}
					}
				} while (cont2 != 0);
				let ITERTOTAL[tt]:= ITERtotal;

				# Fix the rolling horizon variables
				for{j in J}{
					for{t in 1..tt}{
						fix I[j,t]:= I[j,t];
						fix Ineg[j,t]:= Ineg[j,t];
						fix q[j,t]:= q[j,t];
						fix w[j,t]:= w[j,t];
					}
				}

				for{j in J}{
					for{t in 1..tt}{
						fix E[j,t]:= I[j,t];
						fix Eneg[j,t]:= Ineg[j,t];
						fix x[j,t]:= q[j,t];
						fix y[j,t]:= w[j,t];
					}
				}

				let sumFO:= sumFO + sum{j in J, t in tt..tt}(H[j]*I[j,t] + B[j]*Ineg[j,t]);
				let sumBackorder:= sumBackorder + sum{j in J, t in tt..tt}(B[j]*Ineg[j,t]);

				printf "Makespan: " >> ResultISI-IU.txt;
				printf "%4.2f \n", NOVO_MAKESPAN[total] >> ResultISI-IU.txt;
				printf "Iterations: " >> ResultISI-IU.txt;
				printf "%d \n", ITERTOTAL[tt] >> ResultISI-IU.txt;

				reset data Conj, Cjs, CjsII, Conjunto, pos, AUXILIAR, AUXILIAR2, NOVO_MAKESPAN;
			}while(tt < tf);

			close ("./DataIU/h"& class & n & v &".txt");
			close ("./DataIU/B"& class & n & v &".txt");
			close ("./DataIU/D"& class & n & v &".txt");
			close ("./DataIU/p"& class & n & v &".txt");
			close ("./DataIU/setup"& class & n & v &".txt");

			let tempo[variacao]:= _ampl_time + _total_solve_time - sum{i in 0..variacao-1} tempo[i];
			let tempoII[variacao]:= _total_solve_time - sum{i in 0..variacao-1} tempoII[i];

			printf "%4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f  \n", class, n, v, sumFO, sumBackorder, tempo[variacao], tempoII[variacao] >> ResultISI-IU.txt;
			printf "\n" >> ResultISI-IU.txt;

			unfix I; unfix Ineg; unfix q; unfix w; unfix E; unfix Eneg; unfix x; unfix y;

			let tt:= 0; let sumFO:= 0; let sumBackorder:= 0; let novo_makespan:= 0; let makespananterior:=0;
            let {t in 1..(tf+1)} K[t]:= 112; let FO1:= 0; let FO2:= 0; let Kanterior:= 112; let FO:= 0;
			let total:= 0;
		}
		let class:= class + 1;
	}
	let val:= val + 1;
}

