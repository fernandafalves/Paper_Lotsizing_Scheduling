# Interactive Strategy III (ISIII)
# Fernanda de Freitas Alves
###################################################################################################

option eexit -100000;
option display_precision 6;
option auxfiles rca;
option solver cplexamp;
option omit_zero_rows 1;
option cplex_options 'return_mipgap 3 timelimit=30 clocktype=1 threads 1 integrality 3e-20';
suffix absmipgap OUT;
suffix relmipgap OUT;
option presolve 0;
option randseed 1000;

param n;
param tf:= 4;
set J ordered:= 1..n;
set T:= 0..tf;
set Conj ordered default {};       
set Cjs ordered default {};        
set CjsII ordered default {};      
set POS ordered default {};        
set S:= 1..n+1;
set CJS {S} default {}; 			
set CJSII {S} default {}; 		
set Posicao {S} default {}; 	
set ConjuntoII {S} default {}; 	
set Conjunto {S} default {}; 	
set Inv:= 1..10;
set C {Inv} default {};

# Uniform Distribution - Scenario 1

let C[1]:= {1,3,4,5,7,12,13,15,16,17,18,19,21,23,24};
let C[2]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[3]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[4]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[5]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[6]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[7]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[8]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
let C[9]:= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

param val;
param class;
let class:= 1;
param Cj {i in 1..10};
param contador;
param CONTADOR{l in S};
param pos{c in 1..contador};
param cont;
param p{i in J};
param H{i in J};
param B{i in J};
param setup{i in J, j in J};
param Sm{j in J};
param Makespan;
param M;
param Tempo{j in J};
param D{i in J, h in T};
param AUXILIAR{j in J, t in 1..tf};
param AUXILIAR2{j in J, t in 1..tf};
param f default 1;
param makespan;
param NOVO_MAKESPAN{l in S};
param b;
param m;
param u; let u:= 0; 
param variacao;
param tempo{g in 0..100};
param total;
let total:= 0;
let contador:= 0;
let variacao:= 0;
let tempo[0]:= 0;
param tt;
let tt:= 0;
param sumFO;
let sumFO:= 0;
param tempoII{g in 0..1000};
let tempoII[0]:= 0;
param sumBackorder;
let sumBackorder:= 0;

# Parameters for ILS
param ITER;
let ITER:= 0;
param s_0{i in 1..contador};
param aux; param posicao;
param aux2;
param MKS_0;
param MKS_BL{i in 1..contador, j in 1..contador};
param Seq{i in 1..contador};
param AUX{i in 1..contador};
param POSICAO{i in 1..contador};
param CONT; param CONT2;
param SEQ{i in 1..contador, j in 1..contador, k in 1..contador};
param aux3; param aux4; param auxiliar;
param novo_makespan;
let novo_makespan:= 0;

# Parameters for capacity extension
param makespananterior;
let makespananterior:= 0;
param Kanterior;
param KANTERIOR;
param FO;
param cont2;
let cont2:= 0;
param pi;
param gamma;
param ALFA:= 0.07;
param K{t in 1..(tf+1)};
param FO1;
param FO2;
param capinicial;
let {t in 1..(tf+1)} K[t]:= 112;
let capinicial:= 112;
param AUX1{j in J, t in T};
param AUX2{j in J, t in T};
param AUX3{j in J, t in T};
param AUX4{j in J, t in T};
let gamma:= 0;
param somasetup;
param AUXI;
param counterI;
param counter{l in 1..counterI+1};
param SS{l in 1..counterI+1};
let somasetup:= 0;
let counterI:= 0;
let counter[1]:= 0;
param ll;
param khi{j in J, l in 1..counterI+1};

let Cj[1]:= 4;
let Cj[2]:= 6;
let Cj[3]:= 8;
let Cj[4]:= 10;
let Cj[5]:= 12;
let Cj[6]:= 15;
let Cj[7]:= 20;
let Cj[8]:= 50;
let Cj[9]:= 100;


var I{j in J, t in T}, >=0, integer;
var Ineg{j in J, t in T}, >=0, integer;
var q{j in J, t in 1..tf}, >=0, integer;
var w{j in J, t in 1..tf}, binary;

var E{j in J, t in T}, >=0, integer;
var Eneg{j in J, t in T}, >=0, integer;
var x1{j in J, l in 1..counterI+1}, >=0, integer;
var x{j in J, t in T}, >=0, integer;
var y{j in J, t in 1..tf}, binary;
var alfa{l in 1..counterI+1}, binary;

var Z{i in 0..n, j in 0..n: i != j}, binary;
var seq{i in J, l in 1..counterI+1}, integer, >=1, <=n;

# MTZ Formulation
#------------------------------------------------------------------------------------------------------------------

minimize A2: sum{i in CJSII[ll], j in CJSII[ll]: i != j} (setup[i,j]*Z[i,j]);

s.t. R1{j in CJSII[ll]}: sum{i in ConjuntoII[ll]: i != j} Z[i,j] = 1;

s.t. R2{i in CJSII[ll]}: sum{j in ConjuntoII[ll]: i != j} Z[i,j] = 1;

s.t. R3{i in CJSII[ll], j in CJSII[ll]: i != j}: seq[i,ll] - seq[j,ll] + counter[ll]*Z[i,j] <= counter[ll] - 1;

s.t. R4: sum{i in CJSII[ll]} Z[i,0] = 1;

s.t. R5: sum{j in CJSII[ll]} Z[0,j] = 1;


# Lot-sizing with the cuts
#------------------------------------------------------------------------------------------------------------------

minimize A1: sum{j in J, h in T} (H[j]*E[j,h] + B[j]*Eneg[j,h]);

s.t. rest1{j in J}: E[j,tt] = E[j,tt-1] + sum{l in 1..counterI+1} x1[j,l] - D[j,tt] + Eneg[j,tt] - Eneg[j,tt-1];

s.t. rest1a{j in J, h in (tt+1)..tf: tt != tf}: E[j,h] = E[j,h-1] + x[j,h] - D[j,h] + Eneg[j,h] - Eneg[j,h-1];

s.t. rest2{h in tt..tf}: sum{j in 1..n-1}y[j,h]*Sm[j] + sum{j in J}x[j,h]*p[j] <= K[h];

s.t. rest3{h in tt..tf, j in J}: (x[j,h]*p[j])/K[h] <= y[j,h];

s.t. rest4{h in tt..tf, j in J}: y[j,h] <= x[j,h];

s.t. corte{l in 1..counterI+1, h in tt..tt}: SS[l]*alfa[l] + sum{i in CJSII[l]}p[i]*x1[i,l] <= K[h];

s.t. corteII: sum{l in 1..counterI+1} alfa[l] = 1;

s.t. rest3a{l in 1..counterI+1, j in J}: (x1[j,l]*p[j])/K[tt] <= khi[j,l]*alfa[l];

s.t. Rest4a{l in 1..counterI+1, j in J}: khi[j,l]*alfa[l] <= x1[j,l];

s.t. Rest5{j in J}: x[j,tt] = sum{l in 1..counterI+1} x1[j,l];

s.t. Ifix2{i in J}: E[i,0] = 0;

s.t. Inegfix2{i in J}: Eneg[i,0] = 0;

# Lot-sizing problem
#------------------------------------------------------------------------------------------------------------------

minimize A: sum{j in J, h in T} (H[j]*I[j,h] + B[j]*Ineg[j,h]);

s.t. r1{j in J, h in tt..tf}: I[j,h] = I[j,h-1] + q[j,h] - D[j,h] + Ineg[j,h] - Ineg[j,h-1];

s.t. r2{h in tt..tf}: sum{j in 1..n-1}w[j,h]*Sm[j] + sum{j in J}q[j,h]*p[j] <= K[h];

s.t. r3{h in tt..tf,j in J}: (q[j,h]*p[j])/K[h] <= w[j,h];

s.t. r4{h in tt..tf, j in J}: w[j,h] <= q[j,h];

s.t. Ifix{i in J}: I[i,0] = 0;

s.t. Inegfix{i in J}: Ineg[i,0] = 0;

let val:= 1;
repeat while val <= 9{                                                                                                                                                                                                                                                                                                                         
	let n:= Cj[val];
	
	for{v in C[val]}{
		let variacao:= variacao + 1;
		
		for{i in 1..n}{
			read H[i] < ("./DataIU/h"& class & n & v &".txt");
			read B[i] < ("./DataIU/B"& class & n & v &".txt");
			read p[i] < ("./DataIU/p"& class & n & v &".txt");

			for{j in 1..n}{
				read setup[i,j] < ("./DataIU/setup"& class & n & v &".txt");
			}

			for{h in 1..tf}{
				read D[i,h] < ("./DataIU/D"& class & n & v &".txt");
			}
		}	

		let {j in J}Sm[j]:= min{i in J: i!=j} setup[j,i];

		repeat{
			let tt:= tt + 1;
			let novo_makespan:= 0;
			let FO2:= 0; 
			let gamma:= 0; 
			let total:= 0;         

			repeat{
				let FO1:= FO2;	
				let {j in J, t in 1..tf} AUX1[j,t]:= I[j,t];
				let {j in J, t in 1..tf} AUX2[j,t]:= Ineg[j,t];
				let {j in J, t in 1..tf} AUX3[j,t]:= w[j,t];
				let {j in J, t in 1..tf} AUX4[j,t]:= q[j,t];
			
				objective A; drop Rest5;
				drop rest1; drop rest1a; drop rest2; drop rest3a; drop Rest4a; drop rest3; drop rest4; drop corte; drop corteII; drop Ifix2; drop Inegfix2; drop R1; drop R2; drop R3; drop R4; drop R5;
				restore r1; restore r2; restore r3; restore r4; restore Ifix; restore Inegfix;
				solve;
				
				let FO:= sum{j in J, t in T} (H[j]*I[j,t] + B[j]*Ineg[j,t]);
				let u:= 0;  
										
				if (gamma == 0) then{
					let total:= total + 1;
				}
				let CONTADOR[total]:= 0;

				reset data Conj,Conjunto;
				
				for{j in J}{
					if(w[j,tt] == 1)then{
						let Conj:= Conj union {j};
						let CONTADOR[total]:= CONTADOR[total] + 1;
					}else{
						let Conjunto[total]:= Conjunto[total] union {j};
					}
				}

				let contador:= CONTADOR[total];
				# Scheduling with the Iterated Local Search
				reset data Cjs, CJS, CJSII, MKS_BL, s_0, Seq, SEQ, AUX, POSICAO, pos, POS;
				commands ILS.txt;

				let NOVO_MAKESPAN[total]:= novo_makespan;
				let CJS[total]:= Cjs;
			                
				# If the sequence is infeasible and the capacity extension has not yet been used
				if (NOVO_MAKESPAN[total] > (K[tt] + 0.05) && gamma == 0) then{
					let counterI:= 0;
					let ll:= 1; # Quantity of MTZ used
					let CJSII[ll]:= CJS[total]; # Set of sequences of MTZ

					for{j in CJSII[ll]}{
						let counterI:= counterI + 1; # Counter of the initial sequence (ILS)
						let khi[j,ll]:= 1;
					}
					let counter[ll]:= counterI; # Counter of the current sequence

					if(counterI >= 2)then{
						let ConjuntoII[ll]:= CJSII[ll] union {0};
						objective A2;
						drop r1; drop r2; drop r3; drop r4; drop Ifix; drop Inegfix; drop rest1; drop rest1a; drop rest2; drop rest3a; drop rest3; drop rest4; drop corte;
						drop corteII; drop Ifix2; drop Inegfix2; drop Rest4a; drop Rest5;
						restore R1; restore R2; restore R3; restore R4; restore R5;
						solve;

						let SS[ll]:= A2;
					} else{
						let SS[ll]:= 0;
					}
					let ll:= ll + 1; # Next MTZ

					for{i in CJS[total]}{
						if (ll <= counterI+1) then{
						let counter[ll]:= 0;
						let CJSII[ll]:= CJS[total] diff {i};
						let khi[i,ll]:= 0;

						for{j in CJSII[ll]}{
							let counter[ll]:= counter[ll] + 1;
							let khi[j,ll]:= 1;
						}

						if(counter[ll] >= 2)then{
							let ConjuntoII[ll]:= CJSII[ll] union {0};
							objective A2;
							drop r1; drop r2; drop r3; drop r4; drop Ifix; drop Inegfix;
							drop rest1; drop rest1a; drop rest2; drop rest3a; drop rest3; drop rest4; drop corte;
							drop corteII; drop Ifix2; drop Inegfix2; drop Rest4a; drop Rest5;
							restore R1; restore R2; restore R3; restore R4; restore R5;
							solve;

							let SS[ll]:= A2;
						} else{
							let SS[ll]:= 0;
						}
						}
						let ll:= ll + 1;
					}

					for{j in Conjunto[total]}{
						fix y[j,tt]:= 0;
						fix Ineg[j,tt];
						fix I[j,tt];
						let {l in 1..counterI+1} khi[j,l]:= 0;
					}

					for{j in CJS[total]}{
						let y[j,tt]:= 1;
					}

					# Lot-sizing with the cuts
					if(tt != 1) then{
						for{j in J}{
							for{t in 1..(tt-1)}{
								fix E[j,t]:= I[j,t];
								fix Eneg[j,t]:= Ineg[j,t];
								fix x[j,t]:= q[j,t];
								fix y[j,t]:= w[j,t];
							}
						}
					}

					objective A1;
					drop r1; drop r2; drop r3; drop r4; drop Ifix; drop Inegfix; drop R1; drop R2; drop R3; drop R4; drop R5;
					restore Rest4a; restore Rest5;
					restore rest1; restore rest1a; restore rest2; restore rest3; restore rest3a; restore rest4; restore corte; restore corteII; restore Ifix2; restore Inegfix2;
					solve;
					
					let FO:= sum{j in J, t in T} (H[j]*E[j,t] + B[j]*Eneg[j,t]);

					for{l in 1..counterI+1}{
						if(alfa[l] == 1) then{
							let NOVO_MAKESPAN[total]:= SS[l] + sum{j in CJSII[l]} (p[j]*x[j,tt]);
							let AUXI:= l;
						}
					}

					let f:= 1;
					repeat while (f <= counter[AUXI]){
						for{i in CJSII[AUXI]}{
							if(seq[i,AUXI] == min{j in CJSII[AUXI]} seq[j,AUXI]) then{
								let Posicao[AUXI]:= Posicao[AUXI] union {i};
								let CJSII[AUXI]:= CJSII[AUXI] diff {i};
								let f:= f + 1;
							}
						}
					}

					let u:= 1;
				}
								
				if (u == 0) then{
					let FO:= sum{j in J, t in T} (H[j]*I[j,t] + B[j]*Ineg[j,t]);
				} else{
					let FO:= sum{j in J, t in T} (H[j]*E[j,t] + B[j]*Eneg[j,t]);
					let {j in J, t in 1..tf} I[j,t]:= E[j,t];
					let {j in J, t in 1..tf} Ineg[j,t]:= Eneg[j,t];
					let {j in J, t in 1..tf} q[j,t]:= x[j,t];
					let {j in J, t in 1..tf} w[j,t]:= y[j,t];
				}						
				let FO2:= FO;

				if(((FO2 - FO1) >= 0 && gamma != 0) || ((FO2 - FO1) <= 0 && novo_makespan > K[tt])) then{
					let FO:= FO1;
					let {j in J, t in 1..tf} I[j,t]:= AUX1[j,t];
					let {j in J, t in 1..tf} Ineg[j,t]:= AUX2[j,t];
					let {j in J, t in 1..tf} w[j,t]:= AUX3[j,t];
					let {j in J, t in 1..tf} q[j,t]:= AUX4[j,t];
					let K[tt+1]:= KANTERIOR;
					let K[tt]:= Kanterior;
					let NOVO_MAKESPAN[total]:= makespananterior;
					break;
				}

				if (FO2 < FO1 && gamma != 0) then{
					break;
				}

				let gamma:= 0;
				let cont2:= 0;
		
				# Capacity extension
				if (NOVO_MAKESPAN[total] < K[tt] + 0.05) then{
					let gamma:= K[tt] - NOVO_MAKESPAN[total];

					if (gamma > 0.05 && gamma <= (ALFA*capinicial)) then{
						if (tt < tf) then{
							let Kanterior:= K[tt];
							let KANTERIOR:= K[tt+1];
							let K[tt+1]:= capinicial + gamma;
							let K[tt]:= Kanterior - gamma;
							let cont2:= 1;
							let makespananterior:= NOVO_MAKESPAN[total];
						} else{
							break;
						}
					} else{
						if (gamma > 0.05 && gamma > (ALFA*capinicial)) then{
							if (tt < tf) then{
								let Kanterior:= K[tt];
								let KANTERIOR:= K[tt+1];
								let K[tt+1]:= capinicial + (ALFA*capinicial);
								let K[tt]:= Kanterior - ALFA*capinicial;
								let cont2:= 1;
								let makespananterior:= NOVO_MAKESPAN[total];
							} else{
								break;
							}
						} else{
							break;
						}
					}
				}
			} while (cont2 != 0);

			# Fix the rolling horizon variables
			for{j in J}{
				for{t in 1..tt}{
					fix I[j,t]:= I[j,t];
					fix Ineg[j,t]:= Ineg[j,t];
					fix q[j,t]:= q[j,t];
					fix w[j,t]:= w[j,t];
				}
			}

			let sumFO:= sumFO + sum{j in J, t in tt..tt}(H[j]*I[j,t] + B[j]*Ineg[j,t]);
			let sumBackorder:= sumBackorder + sum{j in J, t in tt..tt}(B[j]*Ineg[j,t]);

			printf "Makespan: " >> ResultISIII-IU.txt;
			printf "%4.2f \n", NOVO_MAKESPAN[total] >> ResultISIII-IU.txt;
		}while(tt < tf);
		
		close ("./DataIU/h"& class & n & v &".txt");
		close ("./DataIU/B"& class & n & v &".txt");
		close ("./DataIU/D"& class & n & v &".txt");
		close ("./DataIU/p"& class & n & v &".txt");
		close ("./DataIU/setup"& class & n & v &".txt");

		let tempo[variacao]:= _ampl_time + _total_solve_time - sum{i in 0..variacao-1} tempo[i];
		let tempoII[variacao]:= _total_solve_time - sum{i in 0..variacao-1} tempoII[i];

		printf "%4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f  \n", class, n, v, sumFO, sumBackorder, tempo[variacao], tempoII[variacao] >> ResultISIII-IU.txt;
		printf "\n" >> ResultISIII-IU.txt;
		unfix I; unfix Ineg; unfix q; unfix w; unfix E; unfix Eneg; unfix x; unfix y;
		let total:= 0;  
		let tt:= 0; let sumFO:= 0; let sumBackorder:= 0; let novo_makespan:= 0; let makespananterior:=0;
		let {t in 1..(tf+1)} K[t]:= 112; let FO1:= 0; let FO2:= 0; let Kanterior:= 112; let FO:= 0;                        
	}
	let val:= val + 1;
}


